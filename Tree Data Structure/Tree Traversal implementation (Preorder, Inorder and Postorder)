## Tree Traversal implementation

## Create a node which contains data, left pointer and right pointer of a node

class Node:
    def __init__(self,data):
        self.left=None
        self.right=None
        self.data=data

## Implementation of Preorder traversal
def preorder(root):
    if root:
        print(str(root.data)+" ",end=' ')
        ##using recursive function call for left subtree
        preorder(root.left)
        ##using recursive function call for right subtree
        preorder(root.right)

## Implementation of Inorder traversal
def inOrder(root):
    if root:
        # using a recursive function call for the left subtree
        inOrder(root.left)
        print(str(root.data) + " ", end=' ')
        # using a recursive function call for the right subtree
        inOrder(root.right)

## Implementation of postorder traversal
def postOrder(root):
    if root:
        # using a recursive function call for the left subtree
        postOrder(root.left)
        print(str(root.data) + " ", end=' ')
        # using a recursive function call for the right subtree
        postOrder(root.right)


##Driver code
root=Node(1)
root.left=Node(2)
root.right=Node(3)
root.left.left=Node(4)
root.left.right=Node(5)
print("Preorder Traversal of the given tree is: ")
preorder(root)

## Output:- Preorder Traversal of the given tree is:
# 1  2  4  5  3

print("inOrder Traversal of the given tree is: ")
inOrder(root)

##Output:- inOrder Traversal of the given tree is:
# 4  2  5  1  3

print("postOrder Traversal of the given tree is: ")
postOrder(root)

##Output:-postOrder Traversal of the given tree is:
# 4  2  5  1  3
