## Tree Traversal Implementation without using Recursion

#Implementation of preorder traversal without using Recursion

class Node:
    def __init__(self,data):
        self.left=None
        self.right=None
        self.data=data

# Iterative approach to implement preorder traversal
# Time complexity:- O(n) , since we are using only one 'while loop'
# Space complexity:- O(n), since we are using one stack D.S

def preorder(root):
    if root is None:
        return

    stack=[]
    # Append root node inside the stack
    stack.append(root)

    while len(stack)>0:
        popped=stack.pop()
        print(str(popped.data)+ " ",end= ' ')

        if popped.right:
            stack.append(popped.right)

        if popped.left:
            stack.append(popped.left)


# Iterative approach to implement Postorder traversal
# Time complexity:- O(n) , since we are using only 2 'while loop', sum of it will be O(n)
# Space complexity:- O(n), since we are using 2 stack thats why we are using extra space

def postorder(root):
    if root is None:
        return

    s1=[]
    s2=[]
    s1.append(root)

    while len(s1)>0:
        current=s1.pop()
        s2.append(current.data)

        if current.left!=None:
            s1.append(current.left)

        if current.right!=None:
            s1.append(current.right)

    while len(s2)>0:
        data=s2.pop()
        print(data,end=' ')

# Driver code
root=Node(10)
root.left=Node(20)
root.right=Node(30)
root.left.left=Node(40)
root.left.right=Node(50)
root.right.left=Node(60)
root.right.right=Node(70)

print("preorder Traversal of the given binary tree:- ")
preorder(root)
print()

print("postorder Traversal of the given binary tree:- ")
postorder(root)
print()

#output
#preorder Traversal of the given binary tree:- 
#10  20  40  50  30  60  70

#output:
# postorder Traversal of the given binary tree:-
# 40 50 20 60 70 30 10
