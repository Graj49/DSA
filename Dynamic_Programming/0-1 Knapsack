## 0 - 1 Knapsack problem

## This is a Memoization approach of 0 - 1 Knapsack problem in simple we can say recursion + Memoization -- D.P

## Method Definition

def knapsack(wt,val,W,n):
    # We initialize the matrix with -1 first
    t = [[-1 for i in range(W + 1)] for j in range(n + 1)]

    #base conditions
    if n==0 or W==0:
        return 0

    # Memoization approach is helpful.
    # We are avoiding the problem of overlapping subproblem.
    if t[n][W]!=-1:
        return t[n][W]

    #Two choices:- Max(Either we can skip the object or we can include the object)
    if wt[n-1]<=W:
        t[n][W]=max(
            # including the object (adding)
            # Recursion
            val[n-1]+knapsack(
                wt,val,W-wt[n-1],n-1),
            # Skipping the object
            # Recursion
            knapsack(wt,val,W,n-1))

        return t[n][W]

    elif wt[n-1]>W:
        #Skip the element or the object completely
        t[n][W]=knapsack(wt,val,W,n-1)
        return t[n][W]

## Driver code
# val is profit array
# W is the maximum capacity

val=[60,100,120]
wt=[10,20,30]
W=50
n=len(val)
print(knapsack(wt, val, W,n))

# Output:- 220





# 0 -1 Knapsack problem
## This is a Tabulation approach of 0 - 1 Knapsack problem in simple we can say recursion + Memoization -- D.P


# Program for 0-1 Knapsack problem
# Returns the Maximum value that can be put in a knapsack of capacity W

def knapsack(W,wt,val,n):
    K=[[0 for x in range(W+1)] for x in range(n+1)]

    # Build table K[][] in bottom up manner
    for i in range(n+1):
        for w in range(W+1):
            ## either row is 0 or column is 0
            if i==0 or w==0:
                K[i][w]=0
            elif wt[i-1] <= w:
                K[i][w]=max(val[i-1]
                        +K[i-1][w-wt[i-1]],
                            K[i-1][w])

            else:
                ## wt[i-1]>W
                ## Skip the current object
                ## copy the value from the previous row
                
                K[i][w]=K[i-1][w]

    return K[n][W]

## Driver Code
val=[1,2,3]
wt=[4,5,1]
W=4
n=len(val)
print("Maximum profit in knapsack is", knapsack(W,wt,val,n))

# Output:-
# Maximum profit in knapsack is 3


# Note:-
# We solved problem in Brute force --> O(2^n) (which is Exponential Time complexity)
# After optimizing using D.P it gave --> O(n*W) (Which is Polynomial Time Complexity)
