
## Cyclic Linked List

class Node:
    def __init__(self, data):
        self.data = data
        self.nextPtr = None

class LinkedList:
    def __init__(self):
        self.head = None

    ##Insert new node at the end of the Linked List
    def insertAtEnd(self, new_data):

        ##Create a new node for the new data
        new_node = Node(new_data)

        ##Check whether linked list is empty or different
        if self.head is None:
            self.head = new_node
            return

        ##Insert the data at the end
        temp = self.head
        while temp.nextPtr:  ##Means untill it is not None run this while loop
            temp = temp.nextPtr
        temp.nextPtr = new_node

   ## To detect the loop inside the linked list
    def detectloop(self):
        hare = self.head
        tortoise=self.head

        while tortoise and hare and hare.nextPtr:
            hare=hare.nextPtr.nextPtr
            tortoise=tortoise.nextPtr

            if tortoise==hare:
                return True
            return False


    ##print the Linked list
    def printLinkedList(self):
        temp = self.head
        while temp:
            print(str(temp.data) + " ", end=" ")
            temp = temp.nextPtr

##Driver code
llist = LinkedList()

llist.insertAtEnd(10)
llist.insertAtEnd(20)
llist.insertAtEnd(30)
llist.insertAtEnd(40)

## Make a loop inside the linked list
llist.head.nextPtr.nextPtr.nextPtr=llist.head
if llist.detectloop():
    print("Loop is inside the linked list")
else:
    print("No Loop")


## Output
## No Loop
