## Operations in Linked List

## Search of Nodes in Linked List
## Time complexity : O(n)

class Node:
    def __init__(self, data):
        self.data = data
        self.nextPtr = None

class LinkedList:
    def __init__(self):
        self.head = None

    ##Insert new node at the end of the Linked List
    def insertAtEnd(self, new_data):

        ##Create a new node for the new data
        new_node = Node(new_data)

        ##Check whether linked list is empty or different
        if self.head is None:
            self.head = new_node
            return

        ##Insert the data at the end
        temp = self.head
        while temp.nextPtr:  ##Means untill it is not None run this while loop
            temp = temp.nextPtr
        temp.nextPtr = new_node


    ## Search for a given node inside the Linked List
    ## If node is present return True otherwise return False
    def searchNode(self, nodeData):
        temp=self.head
        while temp:
            if temp.data==nodeData:
                return True
            temp=temp.nextPtr
        return False


    ##print the Linked list
    def printLinkedList(self):
        temp = self.head
        while temp:
            print(str(temp.data) + " ", end=" ")
            temp = temp.nextPtr

##Driver code
llist = LinkedList()

llist.insertAtEnd(10)
llist.insertAtEnd(20)
llist.insertAtEnd(30)
llist.insertAtEnd(40)
print("Insertion of nodes at the end of the Linked List")
llist.printLinkedList()
print()

nodeData =40
if llist.searchNode(nodeData):
    print("Data is present inside the Linked List")
else:
    print("No Data is present inside the Linked List")



## Output
## Insertion of nodes at the end of the Linked List
## 10  20  30  40  
## Data is present inside the Linked List
